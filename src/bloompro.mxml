<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   initialize="windowedApplication_initializeHandler(event)"
					   usePreloader="false"
					   backgroundAlpha="0"
					   backgroundColor="#696969"
					   showStatusBar="false"
					   displayStateChange="fadeIn.play()" 
					   frameRate="60"
					   >
	
	<fx:Declarations>
		<s:Parallel id="fadeIn">
			<s:Animate target="{this}" duration="2000">
				<s:SimpleMotionPath property="backgroundAlpha" valueFrom="0" valueTo="1"/>
			</s:Animate>
			<s:Fade targets="{[vgroup, input, renderGroup]}" alphaFrom="0" alphaTo="1" duration="2000" startDelay="1000"/>
		</s:Parallel>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.utils.StringUtil;
			
			import spark.filters.DropShadowFilter;
			
			// ........................................................................................
			
			private var frameCount:uint = 0;
			private var curMillisecondCount:uint = 0;
			private var prevMillisecondCount:uint = getTimer();
			private var fps:Number = 0.0;
			
			[Bindable] private var canvasBackgroundColor:uint = 0xffffff;
			
			private var outsideSourceFlag:Boolean = false;
			private var sourceLocal:Point = new Point();
			private var stagePoint:Point = new Point();
			private var sampleColor:uint = 0;
			
			// ........................................................................................
			
			protected function windowedApplication_initializeHandler(event:FlexEvent):void
			{
				this.nativeWindow.maximize();
				
				var dropShadow:DropShadowFilter = new spark.filters.DropShadowFilter();
				dropShadow.color = 0x000000;
				dropShadow.alpha = 0.4;
				dropShadow.blurX = 5;
				dropShadow.blurY = 5;
				dropShadow.distance = 5;
				input.filters = [dropShadow];
				renderGroup.filters = [dropShadow];
				
				this.addEventListener(Event.ENTER_FRAME, windowedApplication_enterFrameHandler);
				
				input.setFocus();
			}
			
			private function windowedApplication_enterFrameHandler(event:Event):void
			{
				++frameCount;
				
				curMillisecondCount = getTimer();
				var delta:uint = curMillisecondCount - prevMillisecondCount;
				if (delta >= 1000) 
				{
					fps = frameCount / delta * 1000;
					fpsLabel.text = fps.toFixed(1) + " fps";
					prevMillisecondCount = curMillisecondCount;
					frameCount = 0;
				}
			}
			
			// ........................................................................................
			
			protected function inputKeyDown(event:KeyboardEvent):void
			{
				switch(event.keyCode)
				{
					case Keyboard.TAB:
						
						switch(input.text)
						{
							case "bri": input.appendText("stle "); break;
							case "bris": input.appendText("tle "); break;
							case "brist": input.appendText("le "); break;
							case "bristl": input.appendText("e "); break;
							case "bristle": input.appendText(" "); break;
							
							case "bru": input.appendText("sh "); break;
							case "brus": input.appendText("h "); break;
							case "brush": input.appendText(" "); break;
							
							case "e": input.appendText("xit"); break;
							case "ex": input.appendText("it"); break;
							case "exi": input.appendText("t"); break;
							
							case "o": input.appendText("pen pic.jpg"); break;
							case "op": input.appendText("en pic.jpg"); break;
							case "ope": input.appendText("n pic.jpg"); break;
							case "open": input.appendText(" pic.jpg"); break;
						}
						break;
					
					case Keyboard.ENTER:
						
						if(input.text == "exit")
							this.exit();
						
						if(input.text.substring(0, 5) == "open ")
						{
							var userInputFileName:String = input.text.substring(5);
							
							var appDir:File = File.applicationDirectory;
							var dirListing:Array = appDir.getDirectoryListing();
							
							for each(var file:File in dirListing)
							{	
								if(file.name == userInputFileName)
								{
									var loader:Loader = new Loader();
									loader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoadCompleteHandler);
									loader.load(new URLRequest(file.url)); 
								}
							}
						}
						
						input.text = "";
						
						break;
				}
			}
			
			// ........................................................................................
			
			private function imageLoadCompleteHandler(event:Event):void
			{
				var bitmap:Bitmap = event.currentTarget.content as Bitmap;
				sourceBitmap.source = bitmap;
				sourceBitmap.alpha = 0.15;
				
				var centerX:Number = renderGroup.width / 2;
				var centerY:Number = renderGroup.height / 2;
				
				sourceBitmap.x = centerX - (sourceBitmap.source.bitmapData.width  / 2);
				sourceBitmap.y = centerY - (sourceBitmap.source.bitmapData.height / 2);
				
				colorSampleRect.fill = new SolidColor();
			}
			
			// ........................................................................................
			
			protected function renderGroup_mouseMoveHandler(event:MouseEvent):void
			{
				if(sourceBitmap.source && outsideSourceFlag)
				{
					stagePoint.x = event.stageX;
					stagePoint.y = event.stageY;
					sourceLocal = sourceBitmap.globalToLocal(stagePoint);
					
					// clamp
					if(sourceLocal.x < 0)
						sourceLocal.x = 0;
					else if(sourceLocal.x > sourceBitmap.source.bitmapData.width)
						sourceLocal.x = sourceBitmap.source.bitmapData.width - 1;
					if(sourceLocal.y < 0)
						sourceLocal.y = 0;
					else if(sourceLocal.y > sourceBitmap.source.bitmapData.height)
						sourceLocal.y = sourceBitmap.source.bitmapData.height - 1;
					
					sampleColor = sourceBitmap.source.bitmapData.getPixel(sourceLocal.x, sourceLocal.y);
					SolidColor(colorSampleRect.fill).color = sampleColor;
				}
			}
			
			// ........................................................................................
			
			protected function renderGroup_mouseOverHandler(event:MouseEvent):void
			{
				colorSampleRect.visible = true;
			}
			
			protected function renderGroup_mouseOutHandler(event:MouseEvent):void
			{
				colorSampleRect.visible = false;
			}
			
			// ........................................................................................
			
			protected function sourceBitmap_mouseOverHandler(event:MouseEvent):void
			{
				outsideSourceFlag = false;
				mousePosLabel.visible = true;
			}
			
			protected function sourceBitmap_mouseOutHandler(event:MouseEvent):void
			{
				outsideSourceFlag = true;
				mousePosLabel.visible = false;
			}
			
			protected function sourceBitmap_mouseMoveHandler(event:MouseEvent):void
			{
				mousePosLabel.text = StringUtil.substitute("{x:{0}, y:{1}}", event.localX, event.localY);
				
				if(sourceBitmap.source)
				{
					sampleColor = sourceBitmap.source.bitmapData.getPixel(event.localX, event.localY);
					SolidColor(colorSampleRect.fill).color = sampleColor;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:VGroup id="vgroup" 
			  width="100%" height="100%"
			  alpha="0"
			  paddingBottom="40" paddingLeft="40" paddingRight="40" paddingTop="40"
			  >
		
		<s:TextInput id="input" 
					 width="100%" 
					 alpha="0"
					 focusEnabled="false"
					 fontFamily="Monaco"
					 fontSize="11"
					 keyDown="inputKeyDown(event)"
					 />
	
		<s:SkinnableContainer
				id="renderGroup"
				alpha="0"
				width="100%" height="100%"
				backgroundColor="{canvasBackgroundColor}"
				mouseMove="renderGroup_mouseMoveHandler(event)"
				mouseOut="renderGroup_mouseOutHandler(event)"
				mouseOver="renderGroup_mouseOverHandler(event)"
				>
			
			<s:Image id="sourceBitmap" 
					 mouseMove="sourceBitmap_mouseMoveHandler(event)"
					 mouseOut="sourceBitmap_mouseOutHandler(event)"
					 mouseOver="sourceBitmap_mouseOverHandler(event)"
					 />
			
			<s:SpriteVisualElement id="canvasContainer"
								   width="100%" height="100%"/>
		
		</s:SkinnableContainer>
		
		<s:HGroup width="100%" verticalAlign="baseline">
			<s:HGroup width="100%" horizontalAlign="left">
				<s:Rect id="colorSampleRect" width="10" height="10"/>
				<s:Label id="output"/>
			</s:HGroup>	
			
			<s:HGroup width="100%" gap="20" horizontalAlign="right">	
				<s:Label id="mousePosLabel"
						 paddingTop="10" 
						 color="0xacacac"
						 fontFamily="Monaco" fontSize="9"
						 width="87"/>
				
				<s:Label id="fpsLabel" 
					paddingTop="10" 
					color="0xacacac"
					fontFamily="Monaco" fontSize="9"
					/>			
			</s:HGroup>
		</s:HGroup>

	</s:VGroup>
	
</s:WindowedApplication>
